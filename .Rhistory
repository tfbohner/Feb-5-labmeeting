summarise(growth=mean(spline_growth, na.rm=T),#fss_growth
post1=mean(post1, na.rm=T),
post2=mean(post1, na.rm=T)) %>%
pivot_wider(names_from="droughtyearplus1", values_from=c("growth", "post1","post2")) %>%
dplyr::select(-c(post1_no, post2_no)) %>%
rename(no=growth_no, yes=growth_yes, post1=post1_yes, post2=post2_yes) %>%
mutate(diff=no-yes,
drought_fx=(no-yes)/no,
post1_fx=(no-post1)/no,
post2_fx=(no-post2/no)) %>%
dplyr::select(tree.uniqueID, drought_fx) %>%
rename(drought_fx2=drought_fx)
dfx_summary <- left_join(dfx_summary, dfx_summary2)
plot(dfx_summary$drought_fx~dfx_summary$drought_fx2)
abline(0,1)
ylab("Growth reduction with 1 year post-drought")
plot(dfx_summary$drought_fx~dfx_summary$drought_fx2,
ylab="Growth reduction using 1 year post-drought",
xlab="Growth reduction omitting 1 year post-drought")
abline(0,1)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(fig.retina=3)
library(tidyverse)
library(brms)
library(tidybayes)
nrep = 100
b0 = 5
b1 = -2
sd = 2
set.seed(123)
sim.data <- tibble(X = rnorm(nrep, 0, 1)) %>%
mutate(eps = rnorm(n = nrep, mean = 0, sd = sd),
Y = b0 + b1*X + eps)
kableExtra::kable(head(sim.data))
ggplot(sim.data, aes(X, Y)) +
geom_point() +
geom_smooth(method='lm') +
theme_test()
f1.1 <- lm(Y~X, data=sim.data)
summary(f1.1)
f1.1 <- lm(Y~X, data=sim.data)
b1.1 <- readRDS("saved models/b1.1.rds") ## load your saved model
summary(b1.1)
stancode(b1.1)
trueparams <- tibble(var= c("b0", "b1", "sd"),
value= c(5, -2, 2))
fparams <- broom::tidy(f1.1, conf.int = TRUE) %>%
bind_rows(tibble(term="resid_sd", estimate=summary(f1.1)$sigma)) %>%
mutate(var=c("b0", "b1", "sd"))
bparams <- gather_draws(b1.1, b_Intercept, b_X, sigma) %>%
median_qi() %>%
mutate(var=c("b0", "b1", "sd"))
ggplot() +
geom_point(data=trueparams, aes(var, value), size=3) +
geom_point(data=fparams, aes(var, estimate), color="red", position = position_nudge(x=0.1), size=3) +
geom_linerange(data=fparams, aes(var, ymin = conf.low, ymax=conf.high), color="red", position = position_nudge(x=0.1)) +
geom_point(data=bparams, aes(var, .value), color="blue", position = position_nudge(x=0.2), size=3) +
geom_linerange(data=bparams, aes(var, ymin=.lower, ymax=.upper), color="blue", position = position_nudge(x=0.2)) +
theme_test() +
xlab("Variable") + ylab("Value")
tidybayes::gather_draws(b1.1, b_Intercept, b_X, sigma) %>%
ggplot(aes(x=.value, y=.variable)) +
stat_halfeye(.width = c(.90, .5)) +
theme_test() +
xlab("Variable") + ylab("Value")
draws <- as.mcmc(b1.1, combine_chains = T) ## I combined the chains but you can keep them separate
dim(draws)
plot(b1.1)
pp_check(b1.1)
prior_summary(b1.1)
b1.2 <- readRDS("saved models/b1.2.rds")
```
ggplot(pp, aes(x = X, y = .prediction)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), alpha = 0.25) +
scale_fill_brewer(palette = "Greys")
pp <- data.frame(
X = rnorm(1000, 0, 1),
group= 11) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(fig.retina=3)
library(tidyverse)
library(brms)
library(tidybayes)
nrep = 100
b0 = 5
b1 = -2
sd = 2
set.seed(123)
sim.data <- tibble(X = rnorm(nrep, 0, 1)) %>%
mutate(eps = rnorm(n = nrep, mean = 0, sd = sd),
Y = b0 + b1*X + eps)
kableExtra::kable(head(sim.data))
ggplot(sim.data, aes(X, Y)) +
geom_point() +
geom_smooth(method='lm') +
theme_test()
f1.1 <- lm(Y~X, data=sim.data)
summary(f1.1)
f1.1 <- lm(Y~X, data=sim.data)
b1.1 <- readRDS("saved models/b1.1.rds") ## load your saved model
summary(b1.1)
stancode(b1.1)
trueparams <- tibble(var= c("b0", "b1", "sd"),
value= c(5, -2, 2))
fparams <- broom::tidy(f1.1, conf.int = TRUE) %>%
bind_rows(tibble(term="resid_sd", estimate=summary(f1.1)$sigma)) %>%
mutate(var=c("b0", "b1", "sd"))
bparams <- gather_draws(b1.1, b_Intercept, b_X, sigma) %>%
median_qi() %>%
mutate(var=c("b0", "b1", "sd"))
ggplot() +
geom_point(data=trueparams, aes(var, value), size=3) +
geom_point(data=fparams, aes(var, estimate), color="red", position = position_nudge(x=0.1), size=3) +
geom_linerange(data=fparams, aes(var, ymin = conf.low, ymax=conf.high), color="red", position = position_nudge(x=0.1)) +
geom_point(data=bparams, aes(var, .value), color="blue", position = position_nudge(x=0.2), size=3) +
geom_linerange(data=bparams, aes(var, ymin=.lower, ymax=.upper), color="blue", position = position_nudge(x=0.2)) +
theme_test() +
xlab("Variable") + ylab("Value")
tidybayes::gather_draws(b1.1, b_Intercept, b_X, sigma) %>%
ggplot(aes(x=.value, y=.variable)) +
stat_halfeye(.width = c(.90, .5)) +
theme_test() +
xlab("Variable") + ylab("Value")
draws <- as.mcmc(b1.1, combine_chains = T) ## I combined the chains but you can keep them separate
dim(draws)
plot(b1.1)
pp_check(b1.1)
prior_summary(b1.1)
b1.2 <- readRDS("saved models/b1.2.rds")
```
bparams2 <- gather_draws(b1.2, b_Intercept, b_X, sigma) %>%
median_qi() %>%
mutate(var=c("b0", "b1", "sd"))
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(fig.retina=3)
library(tidyverse)
library(brms)
library(tidybayes)
nrep = 100
b0 = 5
b1 = -2
sd = 2
set.seed(123)
sim.data <- tibble(X = rnorm(nrep, 0, 1)) %>%
mutate(eps = rnorm(n = nrep, mean = 0, sd = sd),
Y = b0 + b1*X + eps)
kableExtra::kable(head(sim.data))
ggplot(sim.data, aes(X, Y)) +
geom_point() +
geom_smooth(method='lm') +
theme_test()
f1.1 <- lm(Y~X, data=sim.data)
summary(f1.1)
f1.1 <- lm(Y~X, data=sim.data)
b1.1 <- readRDS("saved models/b1.1.rds") ## load your saved model
summary(b1.1)
stancode(b1.1)
trueparams <- tibble(var= c("b0", "b1", "sd"),
value= c(5, -2, 2))
fparams <- broom::tidy(f1.1, conf.int = TRUE) %>%
bind_rows(tibble(term="resid_sd", estimate=summary(f1.1)$sigma)) %>%
mutate(var=c("b0", "b1", "sd"))
bparams <- gather_draws(b1.1, b_Intercept, b_X, sigma) %>%
median_qi() %>%
mutate(var=c("b0", "b1", "sd"))
ggplot() +
geom_point(data=trueparams, aes(var, value), size=3) +
geom_point(data=fparams, aes(var, estimate), color="red", position = position_nudge(x=0.1), size=3) +
geom_linerange(data=fparams, aes(var, ymin = conf.low, ymax=conf.high), color="red", position = position_nudge(x=0.1)) +
geom_point(data=bparams, aes(var, .value), color="blue", position = position_nudge(x=0.2), size=3) +
geom_linerange(data=bparams, aes(var, ymin=.lower, ymax=.upper), color="blue", position = position_nudge(x=0.2)) +
theme_test() +
xlab("Variable") + ylab("Value")
tidybayes::gather_draws(b1.1, b_Intercept, b_X, sigma) %>%
ggplot(aes(x=.value, y=.variable)) +
stat_halfeye(.width = c(.90, .5)) +
theme_test() +
xlab("Variable") + ylab("Value")
draws <- as.mcmc(b1.1, combine_chains = T) ## I combined the chains but you can keep them separate
dim(draws)
plot(b1.1)
pp_check(b1.1)
prior_summary(b1.1)
bparams2 <- gather_draws(b1.2, b_Intercept, b_X, sigma) %>%
median_qi() %>%
mutate(var=c("b0", "b1", "sd"))
ggplot() +
geom_point(data=trueparams, aes(var, value), size=3) +
geom_point(data=bparams, aes(var, .value), color="blue", position = position_nudge(x=0.2), size=3) +
geom_linerange(data=bparams, aes(var, ymin=.lower, ymax=.upper), color="blue", position = position_nudge(x=0.2)) +
geom_point(data=bparams2, aes(var, .value), color="blue", position = position_nudge(x=0.3), size=3) +
geom_linerange(data=bparams2, aes(var, ymin=.lower, ymax=.upper), color="blue", position = position_nudge(x=0.3)) +
theme_test() +
xlab("Variable") + ylab("Value") +
ggtitle("Flat priors vs informative priors on b1")
ngroup = 10
group_rep = rep(50, ngroup)
mu_b0 = 5 ## mean of distribution from which plot level intercepts will be drawn
sd_b0 = 0.4 ## sd of distribution from which plot level intercepts will be drawn
b1 = -2 ## slope
sd = .8 ## residual sd
set.seed(123)
params <- tibble(group = LETTERS[seq( from = 1, to = ngroup)],
b0 = rnorm(ngroup, mu_b0, sd_b0),
nrep=group_rep)
set.seed(123)
sim.data <- params %>%
expand_grid(group_n = 1:max(group_rep)) %>%
mutate(X = rnorm(sum(group_rep), 0, 1),
eps = rnorm(n = sum(group_rep), mean = 0, sd = sd),
Y = b0 + b1*X + eps)
b2.1 <- brm(Y ~ X + group, data=sim.data,
chains=4, iter=2000, cores=4)
b2.1 <- readRDS("saved models/b2.1.rds")
summary(b2.1)
b2.2 <- readRDS("saved models/b2.2.rds")
b2.3 <- readRDS("saved models/b2.3.rds")
np_params <- spread_draws(b2.1, `b_.*`, regex=T) %>%
mutate_at(vars(starts_with("b_group")), ~(. + b_Intercept)) %>%
rename(b_groupA=b_Intercept) %>%
pivot_longer(cols = -c(.chain, .iteration,.draw), names_to="param", values_to = "estimate") %>%
group_by(param) %>%
median_qi() %>%
mutate(group=str_sub(param, start=-1)) %>%
left_join(params) %>%
filter(group!="X")
pp_params <- spread_draws(b2.3, b_Intercept, r_group[group, term]) %>%
median_qi(Int=b_Intercept,
est_b0=b_Intercept + r_group) %>%
right_join(params)
ggplot(pp_params, aes(y = group, x = est_b0, xmin = est_b0.lower, xmax = est_b0.upper)) +
geom_pointinterval(color="blue") +
geom_pointinterval(data=np_params, aes(y = group, x = estimate, xmin = .lower, xmax = .upper), position = position_nudge(y=-0.2)) +
geom_point(aes(y=group, x=b0), color="red")
```
# compute and save the WAIC information for the next three models
b2.1 <- add_criterion(b2.1, "waic")
b2.2 <- add_criterion(b2.2, "waic")
b2.3 <- add_criterion(b2.3, "waic")
# compare the WAIC estimates
w <- loo_compare(b2.1, b2.2, b2.3,
criterion = "waic")
cbind(waic_diff = w[, 1] * -2,
se        = w[, 2] * 2)
model_weights(b2.1, b2.2, b2.3,
weights = "waic")  %>%
round(digits = 2)
```
set.seed(123)
pp <- data.frame(
X = rnorm(1000, 0, 1),
group= 11) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T)
ggplot(pp, aes(x = X, y = .prediction)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), alpha = 0.25) +
scale_fill_brewer(palette = "Greys")
pp <- data.frame(
X = rnorm(100, 0, 1),
group= 11) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T)
ggplot(pp, aes(x = X, y = .prediction)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), alpha = 0.25) +
scale_fill_brewer(palette = "Greys")
pp <- data.frame(
X = 0,
group= 11) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T)
ggplot(pp, aes(x = X, y = .prediction)) +
stat_lineribbon(aes(y = .prediction), .width = c(.99, .95, .8, .5), alpha = 0.25) +
scale_fill_brewer(palette = "Greys")
hist(pp$.prediction)
median(pp$.prediction)
pp <- data.frame(
X = 0,
group= 11) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T) %>%
add_predicted_draws(b2.2)
pp <- data.frame(
X = 0,
group= 11) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T) %>%
add_predicted_draws(b2.2, prediction = pred2)
pp <- data.frame(
X = 0) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T) %>%
add_predicted_draws(b2.2, prediction = pred2)
pp <- data.frame(
X = 0) %>%
add_predicted_draws(b2.3, re_formula = NULL, allow_new_levels=T) %>%
add_predicted_draws(b2.2, prediction = "pred2")
pp <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T)
newdata <- data.frame(
X = 0)
pp <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T)
pp <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T) %>%
bind_rows(add_predicted_draws(newdata, b2.2))
pp <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T) %>%
mutate(model="pp") %>%
bind_rows(add_predicted_draws(newdata, b2.2) %>% mutate(model="cp") )
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T) %>%
mutate(model="pp") %>%
bind_rows(add_predicted_draws(newdata, b2.2) %>% mutate(model="cp") )
ggplot(ppred) %>%
geom_histogram(aes(.prediction, color=model))
ggplot(ppred) +
geom_histogram(aes(.prediction, color=model))
ggplot(ppred) +
geom_density(aes(.prediction, color=model))
setwd("/Volumes/GoogleDrive/My Drive/Teaching/Bayesian brms")
setwd("/Volumes/GoogleDrive/My Drive/Teaching/Bayesian brms/Feb-5-labmeeting")
getwd()
xaringan:::inf_mr()
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(fig.retina=3)
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NA, allow_new_levels=T) %>%
mutate(model="pp") %>%
bind_rows(add_predicted_draws(newdata, b2.2) %>% mutate(model="cp") )
ggplot(ppred) +
geom_density(aes(.prediction, color=model)) +
theme_test()
newdata <- data.frame(
X = 0,
group = LETTERS[seq( from = 1, to = ngroup)])
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NA, allow_new_levels=T) %>%
mutate(model="pp")
ggplot(ppred) +
geom_density(aes(.prediction, color=model)) +
theme_test()
set.seed(123)
newdata <- data.frame(
X = 0,
group = LETTERS[seq( from = 1, to = ngroup)])
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NA, allow_new_levels=T) %>%
mutate(model="pp")
set.seed(123)
newdata <- data.frame(
X = 0,
group = LETTERS[seq( from = 1, to = ngroup)])
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NA, allow_new_levels=T) %>%
mutate(model="pp")
ggplot(ppred) +
geom_density(aes(.prediction, color=group)) +
theme_test()
ppred <- add_fitted_draws(newdata, b2.3, re_formula = NA, allow_new_levels=T) %>%
mutate(model="pp")
ggplot(ppred) +
geom_density(aes(.prediction, color=group)) +
theme_test()
names(ppred)
ggplot(ppred) +
geom_density(aes(.value, color=group)) +
theme_test()
ppred <- add_fitted_draws(newdata, b2.3, re_formula = NA, allow_new_levels=T) %>%
mutate(model="pp")
ggplot(ppred) +
geom_density(aes(.value, color=group)) +
theme_test()
View(ppred)
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T) %>%
mutate(model="pp")
ggplot(ppred) +
geom_density(aes(.value, color=group)) +
theme_test()
ggplot(ppred) +
geom_density(aes(.predicted, color=group)) +
theme_test()
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T) %>%
mutate(model="pp")
ggplot(ppred) +
geom_density(aes(.predicted, color=group)) +
theme_test()
ppred <- add_predicted_draws(newdata, b2.3, re_formula = NULL, allow_new_levels=T) %>%
mutate(model="pp")
names(ppred)
ggplot(ppred) +
geom_density(aes(.prediction, color=group)) +
theme_test()
conditional_effects(b2.3)
conditional_effects(b2.3, re_formula=NULL)
x <- hypothesis(b2.3, "Intercept = 0", group = "group", scope = "coef")
x$hypothesis %>%
# Obtain group indicators from original data
left_join(distinct(sim.dat, Group = group)) %>%
# Draw a forest plot with ggplot2
ggplot(aes(Estimate, group)) +
geom_errorbarh(aes(xmin = CI.Lower, xmax = CI.Upper)) +
geom_point()
ngroup = 10
group_rep = rep(50, ngroup)
mu_b0 = 5 ## mean of distribution from which plot level intercepts will be drawn
sd_b0 = 0.4 ## sd of distribution from which plot level intercepts will be drawn
b1 = -2 ## slope
sd = .8 ## residual sd
set.seed(123)
params <- tibble(group = LETTERS[seq( from = 1, to = ngroup)],
b0 = rnorm(ngroup, mu_b0, sd_b0),
nrep=group_rep)
set.seed(123)
sim.data <- params %>%
expand_grid(group_n = 1:max(group_rep)) %>%
mutate(X = rnorm(sum(group_rep), 0, 1),
eps = rnorm(n = sum(group_rep), mean = 0, sd = sd),
Y = b0 + b1*X + eps)
x <- hypothesis(b2.3, "Intercept = 0", group = "group", scope = "coef")
x$hypothesis %>%
# Obtain group indicators from original data
left_join(distinct(sim.dat, Group = group)) %>%
# Draw a forest plot with ggplot2
ggplot(aes(Estimate, group)) +
geom_errorbarh(aes(xmin = CI.Lower, xmax = CI.Upper)) +
geom_point()
distinct(sim.dat, Group = group))
distinct(sim.dat, Group = group)
x$hypothesis %>%
# Obtain group indicators from original data
left_join(newdata) %>%
# Draw a forest plot with ggplot2
ggplot(aes(Estimate, group)) +
geom_errorbarh(aes(xmin = CI.Lower, xmax = CI.Upper)) +
geom_point()
x$hypothesis
x$hypothesis %>%
# Obtain group indicators from original data
left_join(newdata)
x$hypothesis
x$hypothesis %>%
# Obtain group indicators from original data
left_join(newdata, Group=group)
x$hypothesis
x$hypothesis %>%
ggplot(aes(Estimate, Group)) +
geom_errorbarh(aes(xmin = CI.Lower, xmax = CI.Upper)) +
geom_point()
data_A1 <- data.frame(X=0, group=A)
data_A1 <- data.frame(X=0, group="A")
PPD_A1 <- posterior_predict(b2.3, newdata = data_A1)
data_A2 <- data.frame(X=0, group="B")
PPD_A2 <- posterior_predict(fit, newdata = data_A2)
PPD_A2 <- posterior_predict(b2.3, newdata = data_A2)
PPD_diff <- PPD_A2 - PPD_A1
hist(PPD_diff)
hist(PPD_A1)
hist(PPD_A2)
x <- hypothesis(b2.3, "Intercept = 0", group = "group", scope = "coef")
x$hypothesis %>%
ggplot(aes(Estimate, Group)) +
geom_errorbarh(aes(xmin = CI.Lower, xmax = CI.Upper)) +
geom_point()
data_A2 <- data.frame(X=0, group="F")
PPD_A2 <- posterior_predict(b2.3, newdata = data_A2)
PPD_diff <- PPD_A2 - PPD_A1
data_A2 <- data.frame(X=0, group="F")
PPD_A2 <- posterior_predict(b2.3, newdata = data_A2)
PPD_diff <- PPD_A2 - PPD_A1
hist(PPD_diff)
ppred <- add_predicted_draws(newdata, b2.1, re_formula = NULL, allow_new_levels=T) %>%
mutate(model="pp")
ggplot(ppred) +
geom_density(aes(.prediction, color=group)) +
theme_test()
conditional_effects(b2.1)
b2.3 %>%
emmeans( ~ group) %>%
gather_emmeans_draws() %>%
median_qi()
library(emmeans)
b2.3 %>%
emmeans( ~ group) %>%
gather_emmeans_draws() %>%
median_qi()
b2.1 %>%
emmeans( ~ group) %>%
gather_emmeans_draws() %>%
median_qi()
b2.1 %>%
emmeans( ~ group) %>%
gather_emmeans_draws() %>%
ggplot(aes(x = .value, y = contrast)) +
stat_halfeye()
b2.1 %>%
emmeans( ~ group) %>%
contrast(method = "pairwise") %>%
gather_emmeans_draws() %>%
ggplot(aes(x = .value, y = contrast)) +
stat_halfeye()
b2.1 %>%
emmeans( ~ group) %>%
gather_emmeans_draws() %>%
ggplot(aes(x = .value, y = contrast)) +
stat_halfeye()
b2.1 %>%
emmeans( ~ group) %>%
gather_emmeans_draws() %>%
ggplot(aes(x = .value, y = .value)) +
stat_halfeye()
b2.1 %>%
emmeans( ~ group) %>%
gather_emmeans_draws() %>%
ggplot(aes(x = .value, y = group)) +
stat_halfeye()
getwd()
setwd("/Volumes/GoogleDrive/My Drive/Teaching/Bayesian brms/Feb-5-labmeeting")
prior_summary(b2.3)
rlnorm(1000, 0, 1)
hist(rlnorm(1000, 0, 1))
hist(rlnorm(1000, 0, 10))
prior1 <- prior(lognormal(0, 5), class="b",
lognormal(0,5), class="Intercept")
prior1 <- prior(c(lognormal(0, 5), class="b",
lognormal(0,5), class="Intercept"))
b2.4 <- update(b2.3, newdata=sim.data, prior=prior1, chains=4, cores=4, iter=2000)
